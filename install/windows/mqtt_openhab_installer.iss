; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{7A382C93-F240-445E-9A4B-2D7738A15A7A}
AppName=Engimusing Tools
AppVersion=1.0
AppVerName=Engimusing Tools 1.0
AppPublisher=Engimusing
AppPublisherURL=https://www.engimusing.com/
AppSupportURL=https://www.engimusing.com/
AppUpdatesURL=https://www.engimusing.com/
CreateAppDir=no
OutputDir=D:\emus2016\EngimusingInstaller
OutputBaseFilename=EngimusingToolsSetup
SetupIconFile=D:\emus2016\EngimusingInstaller\favicon.ico
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes
WizardImageFile=D:\emus2016\EngimusingInstaller\LargerIcon.bmp
WizardSmallImageFile=D:\emus2016\EngimusingInstaller\logo.bmp
WizardImageStretch=yes

#include <idp.iss>

#define USE_TEMP_FOLDER
#define DOWNLOAD_FILES



[Components]
Name: mosquitto;  Description: "mosquitto (Download Required)"; Flags: disablenouninstallwarning; ExtraDiskSpaceRequired: 600000; 
Name: openhab; Description: "openHAB (Download Required)"; Flags: disablenouninstallwarning; ExtraDiskSpaceRequired: 58720256
Name: smarthomedesigner;  Description: "SmartHome Designer (Download Required)"; Flags: disablenouninstallwarning; ExtraDiskSpaceRequired: 122667965 

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: desktopicon; Description: "Create Engimusing Tools Folder on Desktop"; GroupDescription: "Decktop icons:"; 

[Dirs]
Name: "{commondesktop}\Engimusing Tools"; Tasks: desktopicon

[Icons]
Name: "{commondesktop}\Engimusing Tools\Moquitto"; Filename: "{code:GetMosquittoDir}\Mosquitto.exe"; Parameters: "-c emus_mosquitto.conf"; WorkingDir: "{code:GetMosquittoDir}"; Tasks: desktopicon
Name: "{commondesktop}\Engimusing Tools\OpenHab"; Filename: "{code:GetOpenHabDir}\Start.bat"; WorkingDir: "{code:GetOpenHabDir}"; Tasks: desktopicon
Name: "{commondesktop}\Engimusing Tools\SmartHome"; Filename: "{code:GetSmartHomeDir}\SmartHome-Designer.exe"; WorkingDir: "{code:GetSmartHomeDir}"; Tasks: desktopicon

[Run]
FileName: "explorer.exe"; Description: "Open Engimusing Tools Folder"; Parameters: "{commondesktop}\Engimusing Tools"; Tasks: desktopicon; Flags: postinstall


[Files]
;dummy files to run installers for the components
Source: "favicon.ico"; DestDir: "{tmp}"; BeforeInstall: InstallMosquitto(); Components: mosquitto
Source: "favicon.ico"; DestDir: "{tmp}"; BeforeInstall: InstallOpenHab(); Components: openhab
Source: "favicon.ico"; DestDir: "{tmp}"; BeforeInstall: InstallEclipseSmartHome(); Components: smarthomedesigner

;OpenHab configuration files.
Source: "openhabConfig\services\*"; DestDir: "{code:GetOpenHabDir}\conf\services"; Components: openhab

;Mosquitto configuration files.
Source: "mosquittoConfig\*"; DestDir: "{code:GetMosquittoDir}\";


[Messages]
WizardSelectComponents=Components to Install
SelectComponentsDesc=
SelectComponentsLabel2=The checked items below will be installed. If you would like to change which items are installed go back. 
ComponentsDiskSpaceMBLabel=
ReadyLabel1=
InstallingLabel=Now installing [name] on your computer.
[Code]

var
  UnzippingLabel: TNewStaticText;
  WelcomeMessagePage:  TOutputMsgWizardPage;
  
  
  
  MosquittoPage: TInputDirWizardPage;
  MosquittoUsePreviousInstall: Boolean;
  MosquittoInstalledAndFoundDirectory: Boolean;
  MosquittoInstallDirectory: String;
  MosquittoIsDirEmpty: Boolean;
  MosquittoOptionCheckBox: TNewCheckBox;
  
  OpenHabPage: TInputDirWizardPage;
  OpenHabUsePreviousInstall: Boolean;
  OpenHabInstalledAndFoundDirectory: Boolean;
  OpenHabInstallDirectory: String;
  OpenHabIsDirEmpty: Boolean;
  OpenHabOptionCheckBox: TNewCheckBox;
  
  SmartHomePage: TInputDirWizardPage;
  SmartHomeUsePreviousInstall: Boolean;
  SmartHomeInstalledAndFoundDirectory: Boolean;
  SmartHomeInstallDirectory: String;
  SmartHomeIsDirEmpty: Boolean;
  SmartHomeOptionCheckBox: TNewCheckBox;
  
  JavaPage: TInputDirWizardPage;
  JavaHomeAlreadySetup: Boolean;
  JavaHomeSetup: Boolean;
  JavaHomeDirectory: String;
  JavaOptionCheckBox: TNewCheckBox;
  

  LightMsgPage: TOutputMsgWizardPage;
  UsagePage: TInputOptionWizardPage;

  Old_WizardForm_NextButton_OnClick: TNotifyEvent;


const
  SHCONTCH_NOPROGRESSBOX = 4;
  SHCONTCH_RESPONDYESTOALL = 16;

procedure UnZip(ZipPath, TargetPath: string); 
var
   ShellObj, SrcFile, DestFolder: Variant;
begin
  ShellObj := CreateOleObject('Shell.Application');

  SrcFile := ShellObj.NameSpace(ExpandConstant(ZipPath));
  CreateDir(ExpandConstant(TargetPath));
  DestFolder := ShellObj.NameSpace(ExpandConstant(TargetPath));
  
  DestFolder.CopyHere(SrcFile.Items, SHCONTCH_NOPROGRESSBOX or SHCONTCH_RESPONDYESTOALL);
end;

//Hack to get around next button validation for dir pages
procedure WizardForm_NextButton_OnClick(Sender: TObject);
var 
  MosquittoPreviousDirEntry: String;
  OpenHabPreviousDirEntry: String;
  SmartHomePreviousDirEntry: String;
begin
    MosquittoIsDirEmpty := False;

    if (WizardForm.CurPageID = MosquittoPage.ID) and not DirExists(MosquittoPage.Values[0]) then
    begin
        MosquittoIsDirEmpty := True;
        MosquittoPreviousDirEntry := MosquittoPage.Values[0];
        MosquittoPage.Values[0] := 'C:\'; // Force value to pass validation
    end;

    Old_WizardForm_NextButton_OnClick(Sender);

    if MosquittoIsDirEmpty then
        MosquittoPage.Values[0] := MosquittoPreviousDirEntry;

end;

procedure onClickMosquitto(Sender: TObject);
begin
      MosquittoPage.Edits[0].Enabled := MosquittoOptionCheckBox.Checked;
      MosquittoPage.Buttons[0].Enabled := MosquittoOptionCheckBox.Checked;
end;

procedure onActivateMosquittoPage(Sender: TWizardPage);
begin
   MosquittoOptionCheckBox.Visible := true;
   MosquittoOptionCheckBox.Caption := 'Use Mosquitto Install Specified Above';
   MosquittoOptionCheckBox.OnClick := @onClickMosquitto;
end;

function onBackMosquittoPage(Sender: TWizardPage): Boolean;
begin
   MosquittoOptionCheckBox.Visible := false;
   Result := True;
end;

function onNextMosquittoPage(Sender: TWizardPage): Boolean;
begin
  MosquittoUsePreviousInstall := False;
  MosquittoInstallDirectory := '';
  if(MosquittoOptionCheckBox.Checked and not FileExists(MosquittoPage.Values[0] + '\mosquitto.exe'))then
  begin
      Result := False;
      if(MosquittoIsDirEmpty) then
      begin 
        MosquittoPage.Values[0] := '';
      end
      MsgBox('Specified folder is not a valid mosquitto installation.' + #13'Please specify valid mosquitto install or uncheck checkbox.' , mbError, MB_OK);
  end
  else
  begin
    
    if(MosquittoOptionCheckBox.Checked)then
    begin
      WizardForm.ComponentsList.ItemEnabled[0] := false;
      WizardForm.ComponentsList.Checked[0] := false;
      MosquittoUsePreviousInstall := True;
      MosquittoInstallDirectory := MosquittoPage.Values[0];
    end
    else
    begin
      WizardForm.ComponentsList.ItemEnabled[0] := false;
      WizardForm.ComponentsList.Checked[0] := true;
    end
    MosquittoOptionCheckBox.Visible := false;
    MosquittoOptionCheckBox.OnClick := nil;
    Result := True;
  end; 
end;

procedure BuildMosquittoSetupPage();
var
  ErrorCode: Integer;
  VersionString: TArrayOfString; 
  SubCaptionString: String;
  MosquittoDir: String;
begin
      if(FileExists(ExpandConstant('{%MOSQUITTO_DIR}\mosquitto.exe'))) then
      begin
         MosquittoDir := ExpandConstant('{%MOSQUITTO_DIR}');
         ShellExec('', 'cmd.exe','/c ' + ExpandConstant('{%MOSQUITTO_DIR}\mosquitto.exe') + ' -h > ' + ExpandConstant('{tmp}') + '\mosquittoVersion.txt','', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
         if(LoadStringsFromFile(ExpandConstant('{tmp}') + '\mosquittoVersion.txt', VersionString))then
         begin
              SubCaptionString := 'Found Mosquitto Installation Here:'#13 + ExpandConstant('{%MOSQUITTO_DIR}') + #13'Version:' + VersionString[0] + #13'This Installer will install version 1.4.10';
              MosquittoOptionCheckBox.Checked := True;
         end
         else
         begin
            SubCaptionString := 'Found Mosquitto Installation Here:'#13 + ExpandConstant('{%MOSQUITTO_DIR}') + #13'But unable to verify version, we suggest installing version 1.4.10 which is included in this installer.'#13;
            MosquittoOptionCheckBox.Checked := False;
         end;
      end
      else 
      begin
          MosquittoDir := '';
          SubCaptionString := 'No Mosquitto Installation found.' + #13'Specify mosquitto installation or continue to install version 1.4.10.'#13#13;
          MosquittoOptionCheckBox.Checked := False;
      end;

      MosquittoPage := CreateInputDirPage(WelcomeMessagePage.ID,
          'Mosquitto Installation', '',
          SubCaptionString,
          False, '');
      MosquittoPage.Add('Currently Installed Mosquitto Directory:');
      MosquittoPage.Values[0] := MosquittoDir;
      MosquittoPage.OnActivate := @onActivateMosquittoPage;
      MosquittoPage.OnNextButtonClick := @onNextMosquittoPage;
      MosquittoPage.OnBackButtonClick := @onBackMosquittoPage;

      MosquittoPage.Edits[0].Enabled := MosquittoOptionCheckBox.Checked;
      MosquittoPage.Buttons[0].Enabled := MosquittoOptionCheckBox.Checked;

      MosquittoInstalledAndFoundDirectory := False;
end;

procedure InstallMosquitto();
var
  ErrorCode: Integer;
begin
UnzippingLabel.Visible := True;
UnzippingLabel.Caption := 'Running mosquitto-1.4.10-install-win32.exe installer.'#13 + 'Please finish the mosquitto installer.'; 
    
#ifdef USE_TEMP_FOLDER    
ShellExec('',ExpandConstant('{tmp}\mosquitto-1.4.10-install-win32.exe'),'', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);
#else
ShellExec('','D:\emus2016\EngimusingInstaller\mosquitto-1.4.10-install-win32.exe','', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);
#endif

UnzippingLabel.Visible := False;   


if not RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
     'MOSQUITTO_DIR', MosquittoInstallDirectory) then
begin
    // Failed to find MOQUITTO_DIR variable
    MsgBox('Moquitto Install May Have Failed.'#13 + 'Unable to find MOQUITTO_DIR system variable.', mbInformation, MB_OK);
end
else
begin
  MosquittoInstalledAndFoundDirectory := True;
end;

end;


procedure onClickOpenHab(Sender: TObject);
begin
   if(OpenHabOptionCheckBox.Checked)then
    begin
      OpenHabPage.PromptLabels[0].Caption := 'Currently Installed OpenHab Directory:';
    end
    else
    begin
      OpenHabPage.PromptLabels[0].Caption := 'Install OpenHab Here:';
    end
end;

procedure onActivateOpenHabPage(Sender: TWizardPage);
begin
   OpenHabOptionCheckBox.Visible := true;
   OpenHabOptionCheckBox.Caption := 'Skip Install and Use Directory Above';
   OpenHabOptionCheckBox.OnClick := @onClickOpenHab;
end;

function onBackOpenHabPage(Sender: TWizardPage): Boolean;
begin
   OpenHabOptionCheckBox.Visible := false;
   Result := True;
end;

function onNextOpenHabPage(Sender: TWizardPage): Boolean;
begin
  OpenHabUsePreviousInstall := False;
  OpenHabInstallDirectory := '';
  if(OpenHabOptionCheckBox.Checked and not FileExists(OpenHabPage.Values[0] + '\start.bat'))then
  begin
      Result := False;
      if(OpenHabIsDirEmpty) then
      begin 
        OpenHabPage.Values[0] := '';
      end
      MsgBox('Specified folder is not a valid OpenHab installation.' + #13'Please specify valid OpenHab install or uncheck checkbox.' , mbError, MB_OK);
  end
  else
  begin
    
    if(OpenHabOptionCheckBox.Checked)then
    begin
      WizardForm.ComponentsList.ItemEnabled[1] := false;
      WizardForm.ComponentsList.Checked[1] := false;
      OpenHabUsePreviousInstall := True;
      OpenHabInstallDirectory := OpenHabPage.Values[0];
    end
    else
    begin
      WizardForm.ComponentsList.ItemEnabled[1] := false;
      WizardForm.ComponentsList.Checked[1] := true;
      OpenHabInstallDirectory := OpenHabPage.Values[0];
    end
    OpenHabOptionCheckBox.Visible := false;
    OpenHabOptionCheckBox.OnClick := nil;
    Result := True;
  end; 
end;


procedure BuildOpenHabSetupPage();
var
  ErrorCode: Integer;
  VersionString: TArrayOfString; 
  SubCaptionString: String;
  OpenHabDir: String;
begin
      if(FileExists(ExpandConstant('{%EMUS_OPENHAB_DIR}\start.bat'))) then
      begin
         OpenHabDir := ExpandConstant('{%EMUS_OPENHAB_DIR}');
         if(LoadStringsFromFile(ExpandConstant('{%EMUS_OPENHAB_DIR}\userdata\etc\version.properties'), VersionString) and (GetArrayLength(VersionString) > 7))then
         begin
              SubCaptionString := 'Found OpenHab Installation Here:'#13 + ExpandConstant('{%EMUS_OPENHAB_DIR}') + #13'Version:' + VersionString[7] + #13'This Installer will install version 2.0.0 ';
              OpenHabOptionCheckBox.Checked := True;                                                                                                                                           
         end
         else
         begin
            SubCaptionString := 'Found OpenHab Installation Here:'#13 + ExpandConstant('{%EMUS_OPENHAB_DIR}') + #13'But unable to verify version, we suggest installing version 2.0.0 which is included in this installer.'#13;
            OpenHabOptionCheckBox.Checked := False;
         end;
      end
      else 
      begin
          SubCaptionString := 'No OpenHab Installation found.'#13 + 'Specify previous OpenHab installation directory or path to install version 2.0.0.'#13#13;
          OpenHabOptionCheckBox.Checked := False;
          OpenHabDir := ExpandConstant('{pf}\openHab');
      end;

      OpenHabPage := CreateInputDirPage(MosquittoPage.ID,
          'OpenHab Installation', '',
          SubCaptionString,
          False, '');
      if(OpenHabOptionCheckBox.Checked)then
      begin
        OpenHabPage.Add('Currently Installed OpenHab Directory:');
      end
      else
      begin
        OpenHabPage.Add('Install OpenHab Here:');
      end
      OpenHabPage.Values[0] := OpenHabDir;
      OpenHabPage.OnActivate := @onActivateOpenHabPage;
      OpenHabPage.OnNextButtonClick := @onNextOpenHabPage;
      OpenHabPage.OnBackButtonClick := @onBackOpenHabPage;


      OpenHabInstalledAndFoundDirectory := False;
end;


procedure InstallOpenHAB();
begin
UnzippingLabel.Visible := True;
UnzippingLabel.Caption := 'Unzipping openhab-2.0.0.zip into:'#13 + OpenHabInstallDirectory + #13'Be patient as this can take up to 10 minutes'; 
    

#ifdef USE_TEMP_FOLDER    
      UnZip('{tmp}\openhab-2.0.0.zip', OpenHabInstallDirectory);
#else
      UnZip('D:\emus2016\EngimusingInstaller\openhab-2.0.0.zip', OpenHabInstallDirectory);
#endif

RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
     'EMUS_OPENHAB_DIR', OpenHabInstallDirectory)

  if(not JavaHomeAlreadySetup and JavaHomeSetup)then
  begin
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
     'JAVA_HOME', JavaHomeDirectory)
  end;



UnzippingLabel.Visible := False;     
end;

function GetOpenHabDir(Dummy: string): string;
begin
   Result := OpenHabInstallDirectory;
end;

function GetMosquittoDir(Dummy: string): string;
begin
   Result := MosquittoInstallDirectory;
end;

function GetSmartHomeDir(Dummy: string): string;
begin
   Result := SmartHomeInstallDirectory;
end;



procedure onClickSmartHome(Sender: TObject);
begin  
    if(SmartHomeOptionCheckBox.Checked)then
    begin
      SmartHomePage.PromptLabels[0].Caption := 'Currently Installed SmartHome Directory:';
    end
    else
    begin
      SmartHomePage.PromptLabels[0].Caption := 'Install SmartHome Here:';
    end
end;

procedure onActivateSmartHomePage(Sender: TWizardPage);
begin
   SmartHomeOptionCheckBox.Visible := true;
   SmartHomeOptionCheckBox.Caption := 'Skip Install and Use Directory Above';
   SmartHomeOptionCheckBox.OnClick := @onClickSmartHome;
end;

function onBackSmartHomePage(Sender: TWizardPage): Boolean;
begin
   SmartHomeOptionCheckBox.Visible := false;
   Result := True;
end;

function onNextSmartHomePage(Sender: TWizardPage): Boolean;
begin
  SmartHomeUsePreviousInstall := False;
  SmartHomeInstallDirectory := '';
  if(SmartHomeOptionCheckBox.Checked and not FileExists(SmartHomePage.Values[0] + '\SmartHome-Designer.exe'))then
  begin
      Result := False;
      if(SmartHomeIsDirEmpty) then
      begin 
        SmartHomePage.Values[0] := '';
      end
      MsgBox('Specified folder is not a valid SmartHome installation.' + #13'Please specify valid SmartHome install or uncheck checkbox.' , mbError, MB_OK);
  end
  else
  begin  
    
    if(SmartHomeOptionCheckBox.Checked)then
    begin
      WizardForm.ComponentsList.ItemEnabled[2] := false;
      WizardForm.ComponentsList.Checked[2] := false;
      SmartHomeUsePreviousInstall := True;
      SmartHomeInstallDirectory := SmartHomePage.Values[0];
    end
    else
    begin
      WizardForm.ComponentsList.ItemEnabled[2] := false;
      WizardForm.ComponentsList.Checked[2] := true;
      SmartHomeInstallDirectory := SmartHomePage.Values[0];
    end
    SmartHomeOptionCheckBox.Visible := false;
    SmartHomeOptionCheckBox.OnClick := nil;
    Result := True;
  end; 
end;


procedure BuildSmartHomeSetupPage();
var
  ErrorCode: Integer;
  VersionString: TArrayOfString; 
  SubCaptionString: String;
  SmartHomeDir: String;
begin
      if(FileExists(ExpandConstant('{%EMUS_SMARTHOME_DIR}\SmartHome-Designer.exe'))) then
      begin
         SmartHomeDir := ExpandConstant('{%EMUS_SMARTHOME_DIR}');
         SubCaptionString := 'Found SmartHome Installation Here:'#13 + ExpandConstant('{%EMUS_SMARTHOME_DIR}') + #13'Check box to use this installation otherwise provide path to install version 0.8.0.'#13;
         SmartHomeOptionCheckBox.Checked := True;
      end
      else 
      begin
          SubCaptionString := 'No SmartHome Installation found.'#13 + 'Specify previous SmartHome installation directory or path to install version 0.8.0.'#13#13;
          SmartHomeOptionCheckBox.Checked := False;
          SmartHomeDir := ExpandConstant('{pf}\SmartHome');
      end;

      SmartHomePage := CreateInputDirPage(OpenHabPage.ID,
          'SmartHome Installation', '',
          SubCaptionString,
          False, '');
      if(SmartHomeOptionCheckBox.Checked)then
      begin
        SmartHomePage.Add('Currently Installed SmartHome Directory:');
      end
      else
      begin
        SmartHomePage.Add('Install SmartHome Here:');
      end
      SmartHomePage.Values[0] := SmartHomeDir;
      SmartHomePage.OnActivate := @onActivateSmartHomePage;
      SmartHomePage.OnNextButtonClick := @onNextSmartHomePage;
      SmartHomePage.OnBackButtonClick := @onBackSmartHomePage;

      SmartHomeInstalledAndFoundDirectory := False;
end;


procedure InstallEclipseSmartHome();
begin
UnzippingLabel.Visible := True;
UnzippingLabel.Caption := 'Unzipping eclipsesmarthome-incubation-0.8.0-designer-win.zip into:'#13 + SmartHomeInstallDirectory + #13'Be patient as this can take up to 10 minutes'; 
    
#ifdef USE_TEMP_FOLDER    
      UnZip('{tmp}\eclipsesmarthome-incubation-0.8.0-designer-win.zip', SmartHomeInstallDirectory);
#else
      UnZip('D:\emus2016\EngimusingInstaller\eclipsesmarthome-incubation-0.8.0-designer-win.zip', SmartHomeInstallDirectory);
#endif 

RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
     'EMUS_SMARTHOME_DIR', SmartHomeInstallDirectory)

UnzippingLabel.Visible := False;

end;
               

procedure onClickJava(Sender: TObject);
begin  
  JavaPage.Edits[0].Enabled := JavaOptionCheckBox.Checked;
  JavaPage.Buttons[0].Enabled := JavaOptionCheckBox.Checked;
end;

procedure onActivateJavaPage(Sender: TWizardPage);
begin
   JavaOptionCheckBox.Visible := true;
   JavaOptionCheckBox.Caption := 'Update JAVA_HOME to directory specified above.';
   JavaOptionCheckBox.OnClick := @onClickJava;
end;

function onBackJavaPage(Sender: TWizardPage): Boolean;
begin
   JavaOptionCheckBox.Visible := false;
   Result := True;
end;

function onNextJavaPage(Sender: TWizardPage): Boolean;
begin

  JavaHomeDirectory := '';
  if(JavaOptionCheckBox.Checked and not FileExists(JavaPage.Values[0] + '\bin\java.exe'))then
  begin
      Result := False;
      MsgBox('Specified folder is not a valid Java installation.' + #13'Please specify valid Java install or uncheck checkbox.' , mbError, MB_OK);
  end
  else
  begin  
    
    if(JavaOptionCheckBox.Checked)then
    begin
      JavaHomeDirectory := JavaPage.Values[0];
    end
    JavaHomeSetup := JavaOptionCheckBox.Checked;
    JavaOptionCheckBox.Visible := false;
    JavaOptionCheckBox.OnClick := nil;
    Result := True;
  end; 
end;


procedure BuildJavaCheckPage();
var
  ErrorCode: Integer;
  VersionString: TArrayOfString; 
  SubCaptionString: String;
begin
      if(FileExists(ExpandConstant('{%JAVA_HOME}\bin\java.exe'))) then
      begin
         JavaOptionCheckBox.Checked := False;
         JavaHomeAlreadySetup := True;
      end
      else 
      begin
          SubCaptionString := 'No JAVA Installation found.' + #13'Specify JAVA installation directory or check the box to skip JAVA_HOME setup.'#13 + 'JAVA_HOME setup is required for OpenHAB to run.'#13 + 'See: http://docs.openhab.org/installation/index.html#prerequisites for more info.';
          JavaOptionCheckBox.Checked := True;
          JavaHomeAlreadySetup := False;
      end;

      JavaPage := CreateInputDirPage(wpSelectComponents,
          'JAVA_HOME Setup', '',
          SubCaptionString,
          False, '');
      JavaPage.Add('Current Java Installation Directory:');
      JavaPage.Values[0] := '';
      JavaPage.OnActivate := @onActivateJavaPage;
      JavaPage.OnNextButtonClick := @onNextJavaPage;
      JavaPage.OnBackButtonClick := @onBackJavaPage;

      JavaPage.Edits[0].Enabled := JavaOptionCheckBox.Checked;
      JavaPage.Buttons[0].Enabled := JavaOptionCheckBox.Checked;

end;

function ShouldSkipPage(PageID : Integer) : Boolean;
begin
   WizardForm.WizardSmallBitmapImage.SendToBack();
   if( (PageID = JavaPage.ID) and (JavaHomeAlreadySetup or (not WizardForm.ComponentsList.Checked[1]))) then
   begin
      Result := True;
   end; 
end;

procedure InitializeWizard();
var i: Integer;
begin

    //create a checkbox as an extra input
    JavaOptionCheckBox := TNewCheckBox.Create(WizardForm);
    JavaOptionCheckBox.Parent := WizardForm.MainPanel.Parent;
    JavaOptionCheckBox.Left :=59;
    JavaOptionCheckBox.Height := JavaOptionCheckBox.Height + 3;
    JavaOptionCheckBox.Width := JavaOptionCheckBox.Width + 300;
    JavaOptionCheckBox.Top := WizardForm.MainPanel.Top +
      WizardForm.MainPanel.Height + 170;
    JavaOptionCheckBox.Visible := False;

    BuildJavaCheckPage();

    //Downloading file list
#ifdef DOWNLOAD_FILES
#ifdef USE_TEMP_FOLDER    
    idpAddFileComp('http://mirrors.xmission.com/eclipse/mosquitto/binary/win32/mosquitto-1.4.10-install-win32.exe', ExpandConstant('{tmp}\mosquitto-1.4.10-install-win32.exe'),  'mosquitto');
#else
    idpAddFileComp('http://mirrors.xmission.com/eclipse/mosquitto/binary/win32/mosquitto-1.4.10-install-win32.exe', ExpandConstant('D:\emus2016\EngimusingInstaller\mosquitto-1.4.10-install-win32.exe'),  'mosquitto');
#endif
       //Secondary mirror for moquitto setup file.
       idpAddMirror('http://mirrors.xmission.com/eclipse/mosquitto/binary/win32/mosquitto-1.4.10-install-win32.exe', 'http://engimusing.github.io/install/windows/mosquitto-1.4.10-install-win32.exe');
 
#ifdef USE_TEMP_FOLDER    
    idpAddFileComp('https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F2.0.0%2Fopenhab-2.0.0.zip', ExpandConstant('{tmp}\openhab-2.0.0.zip'),  'openhab');
#else
    idpAddFileComp('https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F2.0.0%2Fopenhab-2.0.0.zip', ExpandConstant('D:\emus2016\EngimusingInstaller\openhab-2.0.0.zip'),  'openhab');
#endif
       //Secondary mirror for openhab zip file.
       idpAddMirror('https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F2.0.0%2Fopenhab-2.0.0.zip', 'http://engimusing.github.io/install/windows/openhab-2.0.0.zip');
 
#ifdef USE_TEMP_FOLDER    
    idpAddFileComp('http://mirrors.xmission.com/eclipse/smarthome/releases/0.8.0/eclipsesmarthome-incubation-0.8.0-designer-win.zip', ExpandConstant('{tmp}\eclipsesmarthome-incubation-0.8.0-designer-win.zip'),  'smarthomedesigner');
#else
    idpAddFileComp('http://mirrors.xmission.com/eclipse/smarthome/releases/0.8.0/eclipsesmarthome-incubation-0.8.0-designer-win.zip', ExpandConstant('D:\emus2016\EngimusingInstaller\eclipsesmarthome-incubation-0.8.0-designer-win.zip'),  'smarthomedesigner');
#endif
       //Secondary mirror for smarthome zip file but it is too big for github so it can't be uploaded
       //idpAddMirror('http://mirrors.xmission.com/eclipse/smarthome/releases/0.8.0/eclipsesmarthome-incubation-0.8.0-designer-win.zip', 'http://engimusing.github.io/install/windows/eclipsesmarthome-incubation-0.8.0-designer-win.zip');
 
    idpDownloadAfter(JavaPage.ID);
#endif

    //Create custom pages

    WelcomeMessagePage := CreateOutputMsgPage(wpWelcome,
    '', 'Welcome to the Engimusing MQTT and openHAB setup.',
#ifndef USE_TEMP_FOLDER
    '!!!!!!!Installer build without USE_TEMP_FOLDER defined DO NOT DISTRIBUTE!!!!!!'#13#13 +
#endif
#ifndef DOWNLOAD_FILES
    '!!!!!!!Installer build without DOWNLOAD_FILES defined DO NOT DISTRIBUTE!!!!!!'#13#13 +
#endif
    'This installer will walk through the installation of four applications useful for using with Engimusings devices.'#13#13 +
    'Mosquitto - MQTT server used to route communication between devices and openHAB. https://mosquitto.org/'#13#13 +
    'OpenHAB 2 - smart home server which provides a web interface for controlling and displaying information about devices. http://www.openhab.org//'#13#13 +
    'Smart Home Designer - Eclipse based IDE used for editing openHAB configuration files. http://www.openhab.com/'#13#13 +
    'EFM_Serial2MQTT - Engimusing custom application which provides communication between an Engimusing boards connected via Serial to a MQTT server. https://www.engimusing.com/'#13#13 +
    'Note: This installer requires an internet connection and will download between 0MB and 200MB of data depending on the options selected.');


    //create a status label for the install page
    UnzippingLabel := TNewStaticText.Create(WizardForm);
    UnzippingLabel.Parent := WizardForm.ProgressGauge.Parent;
    UnzippingLabel.Left := 0;
    UnzippingLabel.Top := WizardForm.ProgressGauge.Top +
      WizardForm.ProgressGauge.Height + 12;
    UnzippingLabel.Width := WizardForm.ProgressGauge.Width;
    UnzippingLabel.Visible := False;

    //create a checkbox as an extra input
    MosquittoOptionCheckBox := TNewCheckBox.Create(WizardForm);
    MosquittoOptionCheckBox.Parent := WizardForm.MainPanel.Parent;
    MosquittoOptionCheckBox.Left :=59;
    MosquittoOptionCheckBox.Height := MosquittoOptionCheckBox.Height + 3;
    MosquittoOptionCheckBox.Width := MosquittoOptionCheckBox.Width + 300;
    MosquittoOptionCheckBox.Top := WizardForm.MainPanel.Top +
      WizardForm.MainPanel.Height + 170;
    MosquittoOptionCheckBox.Visible := False;
    
    OpenHabOptionCheckBox := TNewCheckBox.Create(WizardForm);
    OpenHabOptionCheckBox.Parent := WizardForm.MainPanel.Parent;
    OpenHabOptionCheckBox.Left :=59;
    OpenHabOptionCheckBox.Height := OpenHabOptionCheckBox.Height + 3;
    OpenHabOptionCheckBox.Width := OpenHabOptionCheckBox.Width + 300;
    OpenHabOptionCheckBox.Top := WizardForm.MainPanel.Top +
      WizardForm.MainPanel.Height + 170;
    OpenHabOptionCheckBox.Visible := False;

    SmartHomeOptionCheckBox := TNewCheckBox.Create(WizardForm);
    SmartHomeOptionCheckBox.Parent := WizardForm.MainPanel.Parent;
    SmartHomeOptionCheckBox.Left :=59;
    SmartHomeOptionCheckBox.Height := SmartHomeOptionCheckBox.Height + 3;
    SmartHomeOptionCheckBox.Width := SmartHomeOptionCheckBox.Width + 300;
    SmartHomeOptionCheckBox.Top := WizardForm.MainPanel.Top +
      WizardForm.MainPanel.Height + 170;
    SmartHomeOptionCheckBox.Visible := False;


    // override wizard NextButton click to work around Directory Validaiton.
    Old_WizardForm_NextButton_OnClick := WizardForm.NextButton.OnClick;
    WizardForm.NextButton.OnClick := @WizardForm_NextButton_OnClick;

    WizardForm.TypesCombo.Visible := False;

    WizardForm.WizardSmallBitmapImage.Width := 162;
    WizardForm.WizardSmallBitmapImage.Height := 65;
    WizardForm.WizardSmallBitmapImage.Left := WizardForm.WizardSmallBitmapImage.Left - 100;
    WizardForm.WizardSmallBitmapImage.SendToBack();

    WizardForm.WizardBitmapImage2.Width := 240;
    WizardForm.WizardBitmapImage2.Height := 250;

    WizardForm.PageNameLabel.Width := WizardForm.PageNameLabel.Width - 100;
    WizardForm.PageDescriptionLabel.Width := WizardForm.PageDescriptionLabel.Width - 100;
    
    BuildMosquittoSetupPage();
    BuildOpenHabSetupPage();
    BuildSmartHomeSetupPage();
end;









